// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWStructuredBuffer<float4> Result;
RWStructuredBuffer<float4> OriginalPosition;

float3 position; // The position of the moving point

[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float4 basePosition = Result[id.x];
    float4 originalPosition = OriginalPosition[id.x];
    
    //Distance
    float dist = distance(basePosition.xyz, position);
    
    //Remapping 
    // 4 good
    float t = smoothstep(4.0f, 0, dist); // What is this
    
    //Push amount
    float3 dir = normalize(basePosition.xyz - position);
    //0.5 good
    float3 pushAmount = dir * lerp(0, 1.0f, t); // What does this lerp work
    float3 newPosition = basePosition.xyz + pushAmount;
    
    float newDist = distance(newPosition, originalPosition.xyz);
    
    if (dist > 5.0f)
    {
        newPosition = originalPosition.xyz;
    }

    Result[id.x] = float4(newPosition, 1);
    
}

