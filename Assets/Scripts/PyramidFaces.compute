// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

float3 GetNormalFromTriangle(float3 p0, float3 p1, float3 p2)
{
    return normalize(cross(p1 - p0, p2 - p0));
}

float3 GetTriangelCenter(float3 p0, float3 p1, float3 p2)
{
    return (p0 + p1 + p2) / 3.0;
}

float2 GetTriangelCenter(float2 p0, float2 p1, float2 p2)
{
    return (p0 + p1 + p2) / 3.0;
}

// This describes a vertex on the source mesh
struct SourceVertex
{
    float3 positionOS; //Position in Object Space
    float2 uv;
};

//This descrives a vertex on the generated mesh
struct DrawVertex
{
    float3 positionWS; //Position in World Space
    float2 uv;
};

// We have to insert 3 vertices for each triangle at once so that the triangle stays connected.
struct DrawTriangle
{
    float3 normalWS; //Normal in world space. All vertices have the same normal
    DrawVertex vertices[3];
};

//Compute buffers it is how unity stores a mesh
StructuredBuffer<SourceVertex> _SourceVertices;
StructuredBuffer<int> _SourceTriangles;
AppendStructuredBuffer<DrawTriangle> _DrawTriangles;

//Other variables set by the renderer script (C# script) 
int _NumSourceTriangles;
float _PyramidHeight;
float4x4 _LocalToWorld;

//This converts a source vertex into a draw vertex by converting Object Space to World Space
DrawVertex TransformToWorldSpace(SourceVertex sourceVertex)
{
    DrawVertex drawVertex;
    drawVertex.positionWS = mul(float4(sourceVertex.positionOS, 1.0), _LocalToWorld).xyz;
    drawVertex.uv = sourceVertex.uv;
    return drawVertex;
}

void SetupAndOutputTriangle(DrawVertex v0, DrawVertex v1, DrawVertex v2)
{
    //Since we extrude the center face, the normal must be recalculated
    float3 normalWS = GetNormalFromTriangle(v0.positionWS, v1.positionWS, v2.positionWS);
    
    // Create a draw triangle from three points
    DrawTriangle tri;
    tri.normalWS = normalWS;
    tri.vertices[0] = v0;
    tri.vertices[1] = v1;
    tri.vertices[2] = v2;
    
    //Output the triangle
    _DrawTriangles.Append(tri);
}

// This is the number of threads to create per dispatch. This kernel only uses the x value, so you can fin tune that if needed
[numthreads(128, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Dispatch can only be in chunks of 128, there might be more threads than the nu,ber of triangles. Return in that case
    if (id.x >= _NumSourceTriangles)
        return;

    //Get the vertices which make up this triangle
    //The triabgle array contains indicies to the vertex array
    //Three values in the triangle array describes one triangle in a source mesh
    int triStart = id.x * 3;
    DrawVertex inputVertices[3];
    inputVertices[0] = TransformToWorldSpace(_SourceVertices[_SourceTriangles[triStart]]);
    inputVertices[1] = TransformToWorldSpace(_SourceVertices[_SourceTriangles[triStart + 1]]);
    inputVertices[2] = TransformToWorldSpace(_SourceVertices[_SourceTriangles[triStart + 2]]);
    
    DrawVertex center;
    // We need the triangle's normal to extrude the center point
    float3 triNormal = GetNormalFromTriangle(inputVertices[0].positionWS, inputVertices[1].positionWS, inputVertices[2].positionWS);
    // Find the center position and extrude by _PyramidHeight along the normal
    center.positionWS = GetTriangelCenter(inputVertices[0].positionWS, inputVertices[1].positionWS, inputVertices[2].positionWS) + triNormal * _PyramidHeight;
    //Average the UBs as well
    center.uv = GetTriangelCenter(inputVertices[0].uv, inputVertices[1].uv, inputVertices[2].uv);
    
    //Create the three triangles
    //Triangles mus wind clockwise or they will not render by default
    SetupAndOutputTriangle(inputVertices[0], inputVertices[1], center);
    SetupAndOutputTriangle(inputVertices[1], inputVertices[2], center);
    SetupAndOutputTriangle(inputVertices[2], inputVertices[0], center);
    
    
    //Result[id.xy] = float4(id.x & id.y, (id.x & 15) / 15.0, (id.y & 15) / 15.0, 0.0); //This gives serpenski pyramid
}
