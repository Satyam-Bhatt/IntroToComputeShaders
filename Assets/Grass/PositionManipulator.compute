// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

//RWStructuredBuffer<float4> Result;
RWStructuredBuffer<float4x4> Result;
int count;

float dispatchX;
float dispatchY;
float Angle;

float hash(uint n)
{
    n = (n << 13) ^ n;
    n = (n * (n * n * 15731U + 789221U) + 1376312589U);
    return float(n & uint(0x7fffffff)) / float(0x7fffffff);
}

float DegreeToRadian(float degree)
{
    return degree * 0.0174533;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // dispatchX gives the number of thread groups in the X dimension and 
    // multiplying by 8 gives the number of threads in the X dimension
    // num gives individual ID to eash thread and converts a vec2 to a float. This is how we access and modify the buffer
    uint num = id.x + id.y * dispatchX * 8; // x value of numthreads
    
    float4x4 m = Result[num];
    float4 pos = float4(m[0][3], m[1][3], m[2][3], m[3][3]);
    
    int perAxis = pow(count, 0.5);
    
    //pos = float4(pos.x + id.x, pos.y, pos.z + id.y, pos.w);
    //pos = float4(pos.x + fmod(id.x, 8), pos.y, pos.z + uint(num / 8), pos.w);
    pos = float4(fmod(id.x, perAxis), pos.y, uint(num / perAxis), pos.w);
    
    float t = hash(id.x + id.y * 1000);
    Angle = lerp(-45, 45, t);
    float angle = DegreeToRadian(Angle);
    //float4x4 transform = float4x4(
    //                                float4(1, 0, 0, pos.x),
    //                                float4(0, 1, 0, pos.y),
    //                                float4(0, 0, 1, pos.z),
    //                                float4(0, 0, 0, pos.w));
    float4x4 transform = float4x4(
                                    float4( cos(angle), 0, sin(angle), pos.x),
                                    float4(    0      , 1,     0     , pos.y),
                                    float4(-sin(angle), 0, cos(angle), pos.z),
                                    float4(    0      , 0,     0     , pos.w));
    
    //pos = float4(pos.x + hash(id.x) + id.x, pos.y, pos.z + hash(id.x) * 10 + id.x, pos.w);
    Result[num] = transform;
}
